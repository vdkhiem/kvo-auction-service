service: kvo-auction-service # define meta-data of service
#app: your-app-name
#org: your-org-name

plugins: #
  - serverless-bundle # plugin that optimally packages your ES6 or TypeScript Node.js Lambda functions
  - serverless-pseudo-parameters # use the CloudFormation Pseudo Parameters in your serverless.yml

provider:
  name: aws # cloud provider
  runtime: nodejs14.x # runtime programming language
  memorySize: 256 #lambda memory size
  lambdaHashingVersion: 20201221
  region: ap-southeast-2 # default region
  stage: ${opt:stage, 'sit'} # environment state
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}

resources: 
  Resources: # Use cloudformation syntax start from here
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}

functions: # represent lambda fuction
  healthcheck:
    handler: auction/healthcheck.handler
    events:
      - http:
          method: 'GET'
          path: /${self:custom.apiVersion}/healthcheck
  createAuction:
    handler: auction/createAuction.handler
    events:
      - http:
          method: 'POST' # create operation
          path: /${self:custom.apiVersion}/auction
  getAuctions:
    handler: auction/getAuctions.handler 
    events:
      - http:
          method: GET
          path: /${self:custom.apiVersion}/auctions
          #authorizer: ${self:custom.authorizer}
  getAuction:
    handler: auction/getAuction.handler 
    events:
      - http:
          method: GET
          path: /${self:custom.apiVersion}/auction/{id}
          authorizer: ${self:custom.authorizer}
  placeBid:
    handler: auction/placeBid.handler 
    events:
      - http:
          method: PATCH # don't use POST because it uses for creation. Patch is update a property of a auction
          path: /${self:custom.apiVersion}/auction/{id}/bid
          #authorizer: ${self:custom.authorizer}
  processAuctions:
    handler: auction/processAuctions.handler 
    # events: # commented so it will not trigger every minute. Use command line to trigger manually. sls invoke -f processAuctions -l
    #   - schedule: rate(1 minute) # it similiars cron job

custom: # define custom variable
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:kvo-auth-service-${self:provider.stage}-auth #reference to auth lambda in kvo-auth-service
  AuctionsTable:
    name: !Ref AuctionsTable # AuctionsTable (logical name) is referenced AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    arn: !GetAtt AuctionsTable.Arn
  bundle:
    linting: false # asking serverless-bundle do not perform linting check. E.g. missing comma, semi-colon
  apiVersion: v1
