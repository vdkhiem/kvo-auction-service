service: kvo-auction-service # define meta-data of service
#app: your-app-name
#org: your-org-name

plugins: #
  - serverless-bundle # plugin that optimally packages your ES6 or TypeScript Node.js Lambda functions
  - serverless-pseudo-parameters # use the CloudFormation Pseudo Parameters in your serverless.yml

provider:
  name: aws # cloud provider
  runtime: nodejs14.x # runtime programming language
  lambdaHashingVersion: 20201221
  region: ap-southeast-2 # default region
  stage: ${opt:stage, 'sit'} # environment state
  iamRoleStatements:
    - Effect: Allow
      Action: 
        dynamodb:PutItem
      Resource:
        arn:aws:dynamodb:ap-southeast-2:139754892886:table/AuctionsTable
        #arn:aws:dynamodb:#{AWS:Region}:#{AWS::AccountId}:table/AuctionsTable

resources: 
  Resources: # Use cloudformation syntax start from here
    AuctionsTable: # Logical ID for the resource
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AuctionsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions: 
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id # partition key
            KeyType: HASH

functions: # represent lambda fuction
  healthcheck:
    handler: auction/healthcheck.handler
    events:
      - http:
          method: 'GET'
          path: /${self:custom.apiVersion}/healthcheck
  createAuction:
    handler: auction/createAuction.handler
    events:
      - http:
          method: 'POST'
          path: /${self:custom.apiVersion}/auction
  # getAuctions:
  #   handler: auction/getAuctions.handler 
  #   events:
  #     - http:
  #         method: GET
  #         path: /${self:custom.apiVersion}/auctions
  #         authorizer: ${self:custom.authorizer}
  # getAuction:
  #   handler: auction/getAuction.handler 
  #   events:
  #     - http:
  #         method: GET
  #         path: /${self:custom.apiVersion}/auction/{id}
  #         authorizer: ${self:custom.authorizer}
  # placeBid:
  #   handler: auction/placeBid.handler 
  #   events:
  #     - http:
  #         method: PATCH # don't use POST because it uses for creation. Patch is update a property of a auction
  #         path: /${self:custom.apiVersion}/auction/{id}/bid
  #         authorizer: ${self:custom.authorizer}
  #processAuctions:
  #  handler: auction/processAuctions.handler 
    # events:
    #   - schedule: rate(1 minute) # it similiars cron job
custom: # define custom variable
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  bundle:
    linting: false # asking serverless-bundle do not perform linting check. E.g. missing comma, semi-colon
  apiVersion: v1
